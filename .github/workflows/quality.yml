name: Code Quality & Security

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # ÊØèÂ§©ÂáåÊô®2ÁÇπËøêË°åÂÆâÂÖ®Êâ´Êèè
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  # ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"
        install-go: false

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=10m --config=.golangci.yml

    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "‚ùå Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi
        echo "‚úÖ Code formatting is correct"

    - name: Check imports
      run: |
        go mod tidy
        if ! git diff --exit-code go.mod go.sum; then
          echo "‚ùå go.mod or go.sum is not up to date. Please run 'go mod tidy'"
          exit 1
        fi
        echo "‚úÖ Dependencies are up to date"

    - name: Check for TODO/FIXME comments
      run: |
        TODO_COUNT=$(grep -r "TODO\|FIXME" --include="*.go" . | wc -l)
        echo "Found $TODO_COUNT TODO/FIXME comments"
        if [ $TODO_COUNT -gt 10 ]; then
          echo "‚ö†Ô∏è Too many TODO/FIXME comments ($TODO_COUNT). Consider addressing some of them."
        fi

  # ÊµãËØïË¶ÜÁõñÁéá
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        
        THRESHOLD=70
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        fi
        echo "‚úÖ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  # ÂÆâÂÖ®Êâ´Êèè
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run Nancy (dependency vulnerability scanner)
      run: |
        go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

  # ‰æùËµñÈ°πÊ£ÄÊü•
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for outdated dependencies
      run: |
        go install github.com/psampaz/go-mod-outdated@latest
        go list -u -m -json all | go-mod-outdated -update -direct

    - name: Check dependency licenses
      run: |
        go install github.com/fossa-contrib/fossa-cli@latest
        # fossa analyze
        echo "üìÑ Dependency license check completed"

    - name: Generate dependency graph
      run: |
        go mod graph > dependency-graph.txt
        echo "üìä Dependency graph generated"

    - name: Upload dependency artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis
        path: |
          dependency-graph.txt

  # ‰ª£Á†ÅÂ§çÊùÇÂ∫¶ÂàÜÊûê
  complexity-analysis:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gocyclo
      run: go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

    - name: Run cyclomatic complexity analysis
      run: |
        echo "üîç Analyzing cyclomatic complexity..."
        gocyclo -over 15 . || true
        
        # ÁîüÊàêÂ§çÊùÇÂ∫¶Êä•Âëä
        gocyclo . > complexity-report.txt
        echo "üìä Complexity analysis completed"

    - name: Install ineffassign
      run: go install github.com/gordonklaus/ineffassign@latest

    - name: Check for ineffective assignments
      run: |
        echo "üîç Checking for ineffective assignments..."
        ineffassign ./...

    - name: Install misspell
      run: go install github.com/client9/misspell/cmd/misspell@latest

    - name: Check for misspellings
      run: |
        echo "üîç Checking for misspellings..."
        misspell -error .

    - name: Upload complexity report
      uses: actions/upload-artifact@v3
      with:
        name: complexity-analysis
        path: complexity-report.txt

  # ÊÄßËÉΩÂü∫ÂáÜÊµãËØï
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run benchmarks
      run: |
        echo "‚ö° Running performance benchmarks..."
        go test -bench=. -benchmem -run=^$ ./... > benchmark-results.txt
        cat benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.txt

  # Ë¥®ÈáèÈó®Á¶Å
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage, security-scan, dependency-check, complexity-analysis]
    if: always()
    steps:
    - name: Check quality gate
      run: |
        echo "üö™ Checking quality gate..."
        
        # Ê£ÄÊü•ÂêÑ‰∏™Ê£ÄÊü•ÁöÑÁªìÊûú
        CODE_QUALITY="${{ needs.code-quality.result }}"
        TEST_COVERAGE="${{ needs.test-coverage.result }}"
        SECURITY_SCAN="${{ needs.security-scan.result }}"
        DEPENDENCY_CHECK="${{ needs.dependency-check.result }}"
        COMPLEXITY_ANALYSIS="${{ needs.complexity-analysis.result }}"
        
        echo "Code Quality: $CODE_QUALITY"
        echo "Test Coverage: $TEST_COVERAGE"
        echo "Security Scan: $SECURITY_SCAN"
        echo "Dependency Check: $DEPENDENCY_CHECK"
        echo "Complexity Analysis: $COMPLEXITY_ANALYSIS"
        
        # ÂøÖÈ°ªÈÄöËøáÁöÑÊ£ÄÊü•
        REQUIRED_CHECKS=("$CODE_QUALITY" "$TEST_COVERAGE" "$SECURITY_SCAN")
        
        for check in "${REQUIRED_CHECKS[@]}"; do
          if [[ "$check" != "success" ]]; then
            echo "‚ùå Quality gate failed: Required check failed"
            exit 1
          fi
        done
        
        echo "‚úÖ Quality gate passed: All required checks successful"

    - name: Create quality report
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # Code Quality Report
        
        ## Results Summary
        
        | Check | Status |
        |-------|--------|
        | Code Quality | ${{ needs.code-quality.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.code-quality.result }} |
        | Test Coverage | ${{ needs.test-coverage.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.test-coverage.result }} |
        | Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.security-scan.result }} |
        | Dependency Check | ${{ needs.dependency-check.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.dependency-check.result }} |
        | Complexity Analysis | ${{ needs.complexity-analysis.result == 'success' && '‚úÖ' || '‚ùå' }} ${{ needs.complexity-analysis.result }} |
        
        ## Quality Gate: ${{ (needs.code-quality.result == 'success' && needs.test-coverage.result == 'success' && needs.security-scan.result == 'success') && '‚úÖ PASSED' || '‚ùå FAILED' }}
        
        Generated at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
